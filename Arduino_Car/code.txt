#include <LiquidCrystal.h> 

const int rs=3,en=7,d4=8,d5=11,d6=12,d7=13;//定义液晶显示屏接口
LiquidCrystal lcd(rs,en,d4,d5,d6,d7);

#define MAX 9000
#define MAX1 14000

int flag;
int for_flag;
int Left_motor_back=9;     //左电机后退(IN1)
int Left_motor_go=5;     //左电机前进(IN2)
int Right_motor_go=6;    // 右电机前进(IN3)
int Right_motor_back=10;    // 右电机后退(IN4)

int servopin=2;//设置舵机驱动脚到数字口2
int Echo = A5;  // Echo回声脚(P2.0)超声波
int Trig =A4;  //  Trig 触发脚(P2.1)

int Front_Distance = 0;
int Left_Distance = 0;
int Right_Distance = 0;

const int SensorRight = A2;     //右循迹红外传感器(P3.2 OUT1)
const int SensorLeft = A3;      //左循迹红外传感器(P3.3 OUT2)

int myangle;//定义角度变量
int pulsewidth;//定义脉宽变量
int val;
int SL;    //左循迹红外传感器状态
int SR;    //右循迹红外传感器状态
int speedd = 75;
int speeddd = 120;

void setup()
{
  Serial.begin(9600);
  
  pinMode(Echo, INPUT);    // 定义超声波输入脚
  pinMode(Trig, OUTPUT);   // 定义超声波输出脚
  
  pinMode(Left_motor_go,OUTPUT); // PIN 5 (PWM)
  pinMode(Left_motor_back,OUTPUT); // PIN 9 (PWM)
  pinMode(Right_motor_go,OUTPUT);// PIN 6 (PWM) 
  pinMode(Right_motor_back,OUTPUT);// PIN 10 (PWM)
  
  lcd.begin(16,2);
  
  pinMode(SensorRight, INPUT); //定义右循迹红外传感器为输入
  pinMode(SensorLeft, INPUT); //定义左循迹红外传感器为输入
  
  pinMode(servopin,OUTPUT);//设定舵机接口为输出接口
  
}

void brake()  //刹车，停车
{
  digitalWrite(Right_motor_go,LOW);
  digitalWrite(Right_motor_back,LOW);
  digitalWrite(Left_motor_go,LOW);
  digitalWrite(Left_motor_back,LOW);
  delay(100);//执行时间，可以调整  
}

void run()
{
  digitalWrite(Right_motor_go,HIGH);  // 右电机前进
  digitalWrite(Right_motor_back,LOW);     
  analogWrite(Right_motor_go,speedd);//PWM比例0~255调速，左右轮差异略增减
  analogWrite(Right_motor_back,0);
  digitalWrite(Left_motor_go,HIGH);  // 左电机前进
  digitalWrite(Left_motor_back,LOW);
  analogWrite(Left_motor_go,speedd);//PWM比例0~255调速，左右轮差异略增减 150
  analogWrite(Left_motor_back,0); 
}

void left()         //左转(左轮不动，右轮前进)
{
  digitalWrite(Right_motor_go,HIGH);  // 右电机前进
  digitalWrite(Right_motor_back,LOW);
  analogWrite(Right_motor_go,speedd); //150
  analogWrite(Right_motor_back,0);//PWM比例0~255调速
  digitalWrite(Left_motor_go,LOW);   //左轮后退
  digitalWrite(Left_motor_back,LOW);
  analogWrite(Left_motor_go,0); 
  analogWrite(Left_motor_back,0);//PWM比例0~255调速
}

void spin_left()         //左转(左轮后退，右轮前进) 左旋转
{
  digitalWrite(Right_motor_go,HIGH);  // 右电机前进
  digitalWrite(Right_motor_back,LOW);
  analogWrite(Right_motor_go,speedd+34); 
  analogWrite(Right_motor_back,0);//PWM比例0~255调速
  digitalWrite(Left_motor_go,LOW);   
  digitalWrite(Left_motor_back,LOW);
  analogWrite(Left_motor_go,0); 
  analogWrite(Left_motor_back,0);//PWM比例0~255调速
  delay(750);  //执行时间，可以调整  
}
void xuanzhuan()         //左转(左轮后退，右轮前进) 左旋转
{
  digitalWrite(Right_motor_go,HIGH);  // 右电机前进
  digitalWrite(Right_motor_back,LOW);
  analogWrite(Right_motor_go,speedd+70); 
  analogWrite(Right_motor_back,0);//PWM比例0~255调速
  digitalWrite(Left_motor_go,LOW);   //左轮后退
  digitalWrite(Left_motor_back,HIGH);
  analogWrite(Left_motor_go,0); 
  analogWrite(Left_motor_back,speedd+31);//PWM比例0~255调速
  delay(840);  //执行时间，可以调整  
}

void right()        //右转(右轮不动，左轮前进)
{
  digitalWrite(Right_motor_go,LOW);   //右电机后退
  digitalWrite(Right_motor_back,LOW);
  analogWrite(Right_motor_go,0); 
  analogWrite(Right_motor_back,0);//PWM比例0~255调速
  digitalWrite(Left_motor_go,HIGH);//左电机前进
  digitalWrite(Left_motor_back,LOW);
  analogWrite(Left_motor_go,speedd); 
  analogWrite(Left_motor_back,0);//PWM比例0~255调速
}

void spin_right()        //右转(右轮后退，左轮前进)右旋转
{
  digitalWrite(Right_motor_go,LOW);   //右电机后退
  digitalWrite(Right_motor_back,LOW);
  analogWrite(Right_motor_go,0); 
  digitalWrite(Left_motor_go,HIGH);//左电机前进
  digitalWrite(Left_motor_back,LOW);
  analogWrite(Left_motor_go,speedd+21); 
  analogWrite(Left_motor_back,0);//PWM比例0~255调速
  delay(850);  //执行时间，可以调整    
}
void back()
{
  digitalWrite(Right_motor_go,LOW);  // 右电机前进
  digitalWrite(Right_motor_back,HIGH);     
  analogWrite(Right_motor_go,0);//PWM比例0~255调速，左右轮差异略增减
  analogWrite(Right_motor_back,speedd+20);
  digitalWrite(Left_motor_go,LOW);  // 左电机前进
  digitalWrite(Left_motor_back,HIGH);
  analogWrite(Left_motor_go,0);//PWM比例0~255调速，左右轮差异略增减 150
  analogWrite(Left_motor_back,speedd+21); 
  delay(130);
  
}
void spin_right1()        //右转(右轮后退，左轮前进)右旋转
{
  digitalWrite(Right_motor_go,LOW);   //右电机后退
  digitalWrite(Right_motor_back,HIGH);
  analogWrite(Right_motor_go,0); 
  analogWrite(Right_motor_back,speedd+31);//PWM比例0~255调速
  digitalWrite(Left_motor_go,HIGH);//左电机前进
  digitalWrite(Left_motor_back,LOW);
  analogWrite(Left_motor_go,speedd+31); 
  analogWrite(Left_motor_back,0);//PWM比例0~255调速
  delay(850);  //执行时间，可以调整    
}


void servopulse(int servopin,int myangle)/*定义一个脉冲函数，用来模拟方式产生PWM值*/
{
  pulsewidth=(myangle*11)+500;//将角度转化为500-2480 的脉宽值
  digitalWrite(servopin,HIGH);//将舵机接口电平置高
  delayMicroseconds(pulsewidth);//延时脉宽值的微秒数
  digitalWrite(servopin,LOW);//将舵机接口电平置低
  delay(20-pulsewidth/1000);//延时周期内剩余时间
}

void front_detection()
{
  //此处循环次数减少，为了增加小车遇到障碍物的反应速度
  for(int i=0;i<=5;i++) //产生PWM个数，等效延时以保证能转到响应角度
  {
    servopulse(servopin,50);//模拟产生PWM
  }
  delay(10);
  Front_Distance = Distance_test();
}

void left_detection()
{
  for(int i=0;i<=15;i++) //产生PWM个数，等效延时以保证能转到响应角度
  {
    servopulse(servopin,180);//模拟产生PWM
  }
  delay(10);
  Left_Distance = Distance_test();
}

void right_detection()
{
  for(int i=0;i<=15;i++) //产生PWM个数，等效延时以保证能转到响应角度
  {
    servopulse(servopin,12);//模拟产生PWM
  }
  delay(10);
  Right_Distance = Distance_test();
}

float Distance_test()   // 量出前方距离 
{
  digitalWrite(Trig, LOW);   // 给触发脚低电平2μs
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH);  // 给触发脚高电平10μs，这里至少是10μs
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);    // 持续给触发脚低电
  float Fdistance = pulseIn(Echo, HIGH);  // 读取高电平时间(单位：微秒)
  Fdistance= Fdistance/58;       //为什么除以58等于厘米，  Y米=（X秒*344）/2
  return Fdistance;
}    

void Distance_display(int Distance)//显示距离
{
  if((2<Distance)&(Distance<400))
  {
    lcd.home();        //把光标移回左上角，即从头开始输出   
    lcd.print("    Distance: ");       //显示
    lcd.setCursor(6,2);   //把光标定位在第2行，第6列
    lcd.print(Distance);       //显示距离
    lcd.print("cm");          //显示
  }
  else
  {
    lcd.home();        //把光标移回左上角，即从头开始输出  
    lcd.print("!!! Out of range");       //显示
  }
  delay(100);
  lcd.clear();
}
void tracking1(float for_flag){
  int k1 = 1;  
  while(k1 < for_flag){
  SR = digitalRead(SensorRight);//有信号表明在白色区域，车子底板上L3亮；没信号表明压在黑线上，车子底板上L3灭
  SL = digitalRead(SensorLeft);//有信号表明在白色区域，车子底板上L2亮；没信号表明压在黑线上，车子底板上L2灭
  if (SL == LOW&&SR==LOW)
    run();   //调用前进函数
  else if (SL == HIGH & SR == LOW)// 左循迹红外传感器,检测到信号，车子向右偏离轨道，向左转 
    left();   // 左边压黑线上了，左转
  else if (SR == HIGH & SL == LOW) // 右循迹红外传感器,检测到信号，车子向左偏离轨道，向右转  
    right();  // 右边压黑线上了，右转
  else if(SR == HIGH & SL == HIGH){
    flag=1;
    break;
  }
  k1++;
  }
}
void tracking11(){
  int k3 = 1;  
  while(k3 < MAX){
  SR = digitalRead(SensorRight);//有信号表明在白色区域，车子底板上L3亮；没信号表明压在黑线上，车子底板上L3灭
  SL = digitalRead(SensorLeft);//有信号表明在白色区域，车子底板上L2亮；没信号表明压在黑线上，车子底板上L2灭
  if (SL == LOW&&SR==LOW)
    run();   //调用前进函数
  else if (SL == HIGH & SR == LOW)// 左循迹红外传感器,检测到信号，车子向右偏离轨道，向左转 
    left();   // 左边压黑线上了，左转
  else if (SR == HIGH & SL == LOW) // 右循迹红外传感器,检测到信号，车子向左偏离轨道，向右转  
    right();  // 右边压黑线上了，右转
  else if(SR == HIGH & SL == HIGH){
    flag=1;
    break;
  }
  k3++;
  }
}
void tracking2(){
  int k = 1;
  while( k < MAX1){
  SR = digitalRead(SensorRight);//有信号表明在白色区域，车子底板上L3亮；没信号表明压在黑线上，车子底板上L3灭
  SL = digitalRead(SensorLeft);//有信号表明在白色区域，车子底板上L2亮；没信号表明压在黑线上，车子底板上L2灭
  if (SL == LOW&&SR==LOW)
    run();   //调用前进函数
  else if (SL == HIGH & SR == LOW)// 左循迹红外传感器,检测到信号，车子向右偏离轨道，向左转 
    left();   // 左边压黑线上了，左转
  else if (SR == HIGH & SL == LOW) // 右循迹红外传感器,检测到信号，车子向左偏离轨道，向右转  
    right();  // 右边压黑线上了，右转
  else if(SR == HIGH & SL == HIGH){
    brake();
  }
  k++;
  }
}
void loop()
{ 
    left_detection();//测量左边距障碍物距离
    delay(10);
    //Distance_display(Left_Distance);//液晶屏显示距离
    //delay(10);
    front_detection();//测量前边距障碍物距离
    delay(10);
    //Distance_display(Front_Distance);//液晶屏显示距离
    //delay(10);
    right_detection();//测量右边距障碍物距离
    delay(10);
    //Distance_display(Right_Distance);//液晶屏显示距离
    //delay(50);
    //前进道路
    if(Front_Distance > 20 & Left_Distance < 20 & Right_Distance < 20){  
       tracking1((Front_Distance/25.0)*MAX);
       brake();
      }
      //十字路口
      else if(Front_Distance > 20 & Left_Distance > 20 & Right_Distance > 20 ){
          if(flag){
          flag=0;
          back();
       spin_right();
        tracking2();
         brake();
        }
        else{
        tracking1((Front_Distance/25.0)*MAX);
       //tracking11();
        brake();
        }
        }
    //右转路口
        else if(Front_Distance <= 14 & Left_Distance <= 16 & Right_Distance > 30){
            spin_right();
            tracking2();
            brake();
          }
          //死路
          else if(Front_Distance <= 20 & Left_Distance <= 12 & Right_Distance <= 12){
              xuanzhuan();
              brake();
            }
            //左转路口
            else if(Front_Distance <= 14 & Left_Distance > 30 & Right_Distance <= 16){
            spin_left();
            tracking2();
            flag = 0;
            brake();
            }
            //丁字路口
            else if(Front_Distance <= 16 & Left_Distance > 30 & Right_Distance > 15){
              back();
              spin_right();
              tracking2();
              brake();
              }
              //未知路口
            else{
              if(flag)
                back();
              tracking1((Front_Distance/25.0)*MAX);
              brake();
            }
      
       
            
}